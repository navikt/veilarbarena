# ref https://raw.githubusercontent.com/nais/naisd/master/nais_example.yaml
image: docker.adeo.no:5000/fo/veilarbarena
team: biff
replicas:
  min: 2
  max: 4
  cpuThresholdPercentage: 50
port: 8080
healthcheck:
  liveness:
    path: veilarbarena/internal/isAlive
    initialDelay: 120
  readiness:
    path: veilarbarena/internal/isReady
    initialDelay: 120
prometheus:
  enabled: true
  path: veilarbarena/internal/metrics
resources:
  limits:
    cpu: 3
    memory: 1024Mi
  requests:
    memory: 512Mi
fasitResources:
  used:
  # custom veilarbarena props
  - alias: appdynamics
    resourceType: applicationproperties
  - alias: loadbalancer:veilarbarena
    resourceType: loadbalancerconfig
  - alias: srvveilarbarena
    resourceType: credential
  - alias: kafka-brokers
    resourceType: baseurl
    propertyMap:
      url: KAFKA_BROKERS_URL

  # stolen resources
  - alias: veilarbarenaDataSource
    resourceType: datasource

  # security resources
  - alias: securityTokenService
    resourceType: baseUrl
  - alias: abac.pdp.endpoint
    resourceType: restservice
  - alias: isso-rp-user
    resourceType: credential
  - alias: isso-host
    resourceType: baseUrl
  - alias: isso-jwks
    resourceType: baseUrl
  - alias: isso-issuer
    resourceType: baseUrl
  - alias: isso.isalive
    resourceType: baseUrl
  - alias: veilarblogin.redirect-url
    resourceType: restservice

  # SOAP-services
  - alias: Aktoer_v2
    resourceType: webserviceendpoint
  - alias: virksomhet:Oppfoelgingsstatus_v2
    resourceType: webserviceendpoint

  # STS
  - alias: security-token-service-openid-configuration
    resourceType: restservice

  exposed:
  - alias: veilarbarenaAPI
    resourceType: restservice
    path: /veilarbarena/api

# kafka
kafka:
  client-id: ${app.name}-${fasit.environment.name}
  bootstrap-servers: ${kafka-brokers.url}
  properties:
    security.protocol: SASL_SSL
    value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
    sasl:
      mechanism: PLAIN
      jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${srv$APPLIKASJONSNAVN$.username}" password="${srv$APPLIKASJONSNAVN$.password}";
    ssl.truststore:
      location: ${javax.net.ssl.trustStore}
      password: ${javax.net.ssl.trustStorePassword}
  producer:
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    value-serializer: org.apache.kafka.common.serialization.StringSerializer

alertProfiles:
  - common-java-modules
